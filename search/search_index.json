{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Glados","text":"<p>The Glados project aims at developing a language from scratch with a compiler and a vm for it. The language is a simple imperative language, with a C-like syntax. The compiler and the vm are written in haskell.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have these packages installed in your machine: - Haskell - Stack</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#coding-in-funk","title":"Coding In Funk","text":"<p>To learn how to code in Funk, you can read the Funk Language Documentation.</p>"},{"location":"#running-funk","title":"Running Funk","text":"<p>To run your code written in Funk, you must first compile it to bytecode. You can do so by running the following command: <pre><code>stack run compile-exe [path to your files]\n</code></pre> This will generate a <code>out.bin</code> file in the same directory as your source files. To run the bytecode, you can use the following command: <pre><code>stack run vm-exe [path to your bytecode] [arguments]\n</code></pre></p>"},{"location":"#creators","title":"Creators","text":"<p>Erwan Gonzales</p> <p>Clovis Rabot</p> <p>Th\u00e9o Liennard</p> <p>Angelo Zhou</p>"},{"location":"Technical%20Documentation/Ast/Description/","title":"Description","text":""},{"location":"Technical%20Documentation/Ast/Description/#description","title":"Description","text":"<p>The Funk's AST is composed of several logic nodes. Those nodes provide the boilerplate functions for the language to execute logic:</p> <ul> <li><code>sequence</code>: a list of following instructions</li> <li><code>define</code>: initialize a variable with a given type</li> <li><code>assign</code>: change a defined variable's value</li> <li><code>return</code>: instruction for a scope to return a given expression</li> <li><code>if</code>: conditional statement, can optionnaly have an else block</li> <li><code>while</code>: iterative statement, looping over a scope given a condition</li> <li><code>break</code>: instruction for a loop to get out</li> <li><code>continue</code>: instruction for a loop to go to the next iteration</li> </ul> <p>But it is also composes of node expressing values. As a function call, arithmetic or boolean operations and even array indexing:</p> <ul> <li><code>call</code>: a call to a defined function</li> <li><code>indexing</code>: dereference a pointer to an array with a given offset</li> <li><code>int</code>: a valid integer number</li> <li><code>float</code>: a valid floating number</li> <li><code>array</code>: an array of a given size and type</li> <li><code>binop</code>: a binary operator, logic or arithmetic</li> <li><code>unop</code>: a unary operator</li> <li><code>identifier</code>: the name of a variable</li> </ul> <p>Using theses nodes the Funk's AST is able to sequence the logic of a funk program giving it iterative logic with the use of <code>while</code> loops, conditional logic using <code>if</code> and functional logic using <code>call</code> and <code>lambda</code>.</p>"},{"location":"Technical%20Documentation/Ast/Description/#representation","title":"Representation","text":"<p>Here is the representation of the generated AST for a recursive factorial function:</p> <p></p>"},{"location":"Technical%20Documentation/Bytecode/Bytecode/","title":"Bytecode","text":""},{"location":"Technical%20Documentation/Bytecode/Bytecode/#binary","title":"Binary","text":"<p>The bytecode is composed of instructions. Each instruction is followed with one or no arguments.</p> <p>To be able to evaluate the bytecode three important structures are required:</p>"},{"location":"Technical%20Documentation/Bytecode/Bytecode/#operand-stack","title":"Operand Stack","text":"<p>This stack is used to manage variables during the call of functions. Variables are pushed onto it thanks to <code>iload</code>, <code>fload</code>, <code>iconst</code> or <code>fconst</code> and are retrieve thanks to <code>istore</code>, <code>fstore</code> or <code>return</code>.</p> <p>[!warning] Elements of this stack are consumed upon use.</p>"},{"location":"Technical%20Documentation/Bytecode/Bytecode/#funk-env","title":"Funk env","text":"<p>This stack is used to store the position of every function already parsed in the bytecode.</p>"},{"location":"Technical%20Documentation/Bytecode/Bytecode/#variable-env","title":"Variable Env","text":"<p>This stack is used to store the value of variable with their index. This stack has multiple instances during the eval of the bytecode because every <code>invoke</code> create a local variable env.</p> <p>[!warning] Upon <code>invoke</code> call, the arguments for the function must be loaded in the variable env from the index 0 to index number of the arguments.</p>"},{"location":"Technical%20Documentation/Bytecode/Bytecode/#examples","title":"Examples","text":""},{"location":"Technical%20Documentation/Bytecode/Bytecode/#1","title":"#1","text":"<pre><code>funk add (a: i32, b: i32): i32\n{\n    var c: i32 = a + b;\n    c\n}\nadd(5, 6)\n</code></pre> <pre><code>; Bytecode for the add function\nfunk_26            ; Declares a function of 26 bytes in 6 instructions\niload_4_0         ; Load argument a of size 4 bytes\niload_4_1         ; Load argument b of size 4 bytes\niadd               ; Add a and b\nistore_4_2        ; Store the result in local variable 2 (c)\niload_4_2         ; Load the result\nreturn             ; Return the result\n\n; Bytecode for invoking the add function\niconst_4_5           ; Push constant 5 (argument for a)\niconst_4_6           ; Push constant 6 (argument for b)\ninvoke #0          ; Invoke add function\n; The result is now on the stack\n</code></pre>"},{"location":"Technical%20Documentation/Bytecode/Bytecode/#2","title":"#2","text":"<pre><code>funk factorial(n: i32): i32\n{\n    if (n == 0 || n == 1) {\n        1\n    } else {\n        var result: i32 = 1;\n        var i: i32 = 2;\n        while (i &lt;= n) {\n            result = result * i;\n            i = i + 1;\n        }\n        result\n    }   \n}\nfactorial(5);\n</code></pre> <pre><code>; Bytecode for the add function\nfunk_\niload_0\niconst_0\nieq\niff_2\niconst_1\nreturn\niload_0\niconst_1\nieq\niff_2\niconst_1\nreturn\niconst_1\nistore_1           ; Store top of operand stack into local variable 1 (result)\niconst_2\nistore_2           ; Store top of operand stack into local variable 2 (i)\niload_2\niload_0\nile\niff_9\niload_1\niload_2\nimul\nistore_1\niload_2\niconst_1\niadd\nistore_2\ngoto_-8\niload_1\nreturn\n\n\n; Bytecode for invoking the factorial function\niconst_5           ; Push constant 5 (argument for a)\ninvoke #0          ; Invoke factorial function\n; The result is now on the stack\n</code></pre>"},{"location":"Technical%20Documentation/Bytecode/Instructions/","title":"Instructions","text":""},{"location":"Technical%20Documentation/Bytecode/Instructions/#bytecode-instructions","title":"Bytecode Instructions","text":"<ol> <li>Memory Management Instructions:<ul> <li><code>iload</code>, <code>uload</code>, <code>fload</code>: Load an integer, unsigned integer or float from a local variable onto the operand stack. It takes the index and the size of the variable as arguments.</li> <li><code>istore</code>, <code>ustore</code>, <code>fstore</code>: Store an integer, unsigned integer or float at the top of the operand stack, into a local variable. It takes the index and the size of the variable as arguments.</li> <li><code>iconst</code>, <code>uconst</code>, <code>fconst</code>: Load an integer, unsigned integer or float from an argument onto the operand stack. It takes  and the size of the variable and the variable as arguments.</li> <li><code>funk</code>: Creates a function with a number of instructions, written in bytes (8bits) as argument</li> </ul> </li> <li>Arithmetic Instructions:<ul> <li><code>iadd</code>, <code>fadd</code>: Add two (unsigned) integers or floats.</li> <li><code>isub</code>, <code>fsub</code>: Subtract two (unsigned) integers or floats.</li> <li><code>imul</code>, <code>fmul</code>: Multiply two (unsigned) integers or floats.</li> <li><code>idiv</code>, <code>fdiv</code>: Divide two (unsigned) integers or floats.</li> <li><code>imod</code>: Remainder after integer division.</li> </ul> </li> <li>Comparison and Conditional Instructions:<ul> <li><code>ieq</code>, <code>ine</code>, <code>ilt</code>, <code>igt</code>, <code>ile</code>, <code>ige</code>: Compare two (unsigned) integers. (==, !=, &lt;, &gt;, &lt;=, &gt;=)</li> <li><code>feq</code>, <code>fne</code>, <code>flt</code>, <code>fgt</code>, <code>fle</code>, <code>fge</code>: Compare two floats. (==, !=, &lt;, &gt;, &lt;=, &gt;=)</li> <li><code>ift</code>: Conditional jumps if true, take the number of bytes to jump as argument.</li> <li><code>iff</code>: Conditional jumps if false, take the number of bytes to jump as argument.</li> <li><code>goto</code>: Unconditional jump, take the number of bytes to jump as argument.</li> </ul> </li> <li>Logical Instructions:<ul> <li><code>iand</code>, <code>ior</code>, <code>ixor</code>: Bitwise AND, OR, XOR for integers.</li> </ul> </li> <li>Control Flow Instructions:<ul> <li><code>invoke</code>: Invoke method.</li> <li><code>return</code>: Return from the current method.</li> </ul> </li> <li>Type Conversion Instructions:<ul> <li><code>i2f</code>, <code>f2i</code>: Convert integer to float or float to integer.</li> </ul> </li> <li>Stack Instructions:<ul> <li><code>pop</code>: Pop the top element from the operand stack.</li> <li><code>dup</code>: Duplicate the top element on the operand stack.</li> <li><code>popPrev</code>: Pop the element below the top element from the operand stack.</li> <li><code>iloadStack</code>, <code>floadStack</code>, <code>uloadStack</code>: Load an integer, unsigned integer or float from the operand stack onto the operand stack. It takes the index and the size of the variable as arguments.</li> </ul> </li> <li>Bitwise Instructions:<ul> <li><code>not</code>: Bitwise NOT for integers.</li> </ul> </li> <li>Type Conversion Instructions:<ul> <li><code>iconvert</code>, <code>uconvert</code>, <code>fconvert</code>: Convert integer to unsigned integer or float, unsigned integer to integer or float, float to integer or unsigned integer.</li> </ul> </li> <li>Memory Access Instructions:<ul> <li><code>addr</code>: Get the address of a variable.</li> <li><code>access</code>: Access a variable at a given address.</li> <li><code>modify</code>: Modify a variable at a given address.</li> <li><code>write</code>: Write a value in the stdout.</li> <li><code>allocate</code>: Allocate a given number of bytes on the heap.</li> <li><code>getArg</code>: Get the argument at a given index.</li> </ul> </li> </ol> Bin Code Instruction Argument 0x00 <code>funk</code> True 0x01 ... 0x03 <code>iload</code>, <code>fload</code>, <code>uload</code> True 0x04 ... 0x06 <code>istore</code>, <code>fstore</code>, <code>ustore</code> True 0x07 ... 0x09 <code>iconst</code>, <code>fconst</code>, <code>uconst</code> True 0x0A, 0x0B <code>iadd</code>, <code>fadd</code> False 0x0C, 0x0D <code>isub</code>, <code>fsub</code> False 0x0E, 0x0F <code>imul</code>, <code>fmul</code> False 0x10, 0x11 <code>idiv</code>, <code>fdiv</code> False 0x12 <code>imod</code> False 0x13 ... 0x18 <code>ieq</code>, <code>ine</code>, <code>ilt</code>, <code>igt</code>, <code>ile</code>, <code>ige</code> False 0x19 ... 0x1E <code>feq</code>, <code>fne</code>, <code>flt</code>, <code>fgt</code>, <code>fle</code>, <code>fge</code> False 0x1F, 0x20 <code>ift</code>, <code>iff</code> True 0x21 <code>goto</code> True 0x22 ... 0x24 <code>iand</code>, <code>ior</code>, <code>ixor</code> False 0x25 <code>invoke</code> True 0x26 <code>return</code> False 0x27, 0x28 <code>i2f</code>, <code>f2i</code> False 0x29 <code>pop</code> True 0x2A <code>dup</code> True 0x2B <code>popPrev</code> True 0x2C ... 0x2E <code>iloadStack</code>, <code>floadStack</code>, <code>uloadStack</code> True 0x2F <code>not</code> False 0x30 ... 0x32 <code>iconvert</code>, <code>uconvert</code>, <code>fconvert</code> True 0x33 <code>addr</code> True 0x34 <code>access</code> False 0x35 <code>modify</code> False 0x36 <code>write</code> False 0x37 <code>allocate</code> False 0x38 <code>getArg</code> False"},{"location":"Technical%20Documentation/Funk%20Language/Bnf/","title":"Grammar Rules","text":"<p>1.Program Structure</p> <pre><code>&lt;program&gt; ::= { &lt;declaration&gt; }*\n</code></pre> <p>2.Declarations: <pre><code>&lt;declaration&gt; ::= &lt;function-definition&gt; | &lt;pointer-definition&gt; | &lt;import-statement&gt;\n</code></pre></p> <p>3.Function Definition: <pre><code>&lt;function-definition&gt; ::= \"funk\" &lt;function-name&gt; \"(\" [ &lt;parameter-list&gt; ] \")\" \":\" &lt;return-type&gt; \"{\" &lt;statement&gt;* \"}\"\n</code></pre></p> <p>4.Parameter List: <pre><code>&lt;parameter-list&gt; ::= &lt;parameter&gt; { \",\" &lt;parameter&gt; }*\n</code></pre></p> <p>5.Parameter: <pre><code>&lt;parameter&gt; ::= &lt;variable-name&gt; \":\" &lt;data-type&gt;\n</code></pre></p> <p>6.Pointer Definition: <pre><code>&lt;pointer-definition&gt; ::= \"var\" &lt;variable-name&gt; \":\" \"*\" &lt;data-type&gt; \"=\" \"&amp;\" &lt;variable-name&gt; \";\"\n</code></pre></p> <p>7.Import Statement: <pre><code>&lt;import-statement&gt; ::= \"include\" &lt;string-literal&gt; \";\"\n</code></pre></p> <p>8.Expressions: <pre><code>&lt;expression&gt; ::= &lt;variable-name&gt; | &lt;literal&gt; | &lt;binary-operation&gt; | &lt;unary-operation&gt; | \"(\" &lt;expression&gt; \")\"\n</code></pre></p> <p>9.Binary Operation: <pre><code>&lt;binary-operation&gt; ::= &lt;expression&gt; &lt;binary-operator&gt; &lt;expression&gt;\n</code></pre></p> <p>10.Unary Operation: <pre><code>&lt;unary-operation&gt; ::= &lt;unary-operator&gt; &lt;expression&gt;\n</code></pre></p> <p>11.Variables: <pre><code>&lt;pointer&gt; ::= \"*\" &lt;variable-name&gt;\n</code></pre></p> <p>12.Pointers: <pre><code>&lt;pointer&gt; ::= \"*\" &lt;variable-name&gt;\n</code></pre></p> <p>13.Data Types: <pre><code>&lt;data-type&gt; ::= \"i8\" | \"u8\" | \"i16\" | \"u16\" | \"i32\" | \"u32\" | \"i64\" | \"u64\" | \"f32\" | \"f64\"\n</code></pre></p>"},{"location":"Technical%20Documentation/Vm/Description/","title":"Description","text":""},{"location":"Technical%20Documentation/Vm/Description/#description","title":"Description","text":"<p>The Funk's VM composed of two parts: - The lexer - The execution engine</p>"},{"location":"Technical%20Documentation/Vm/Description/#lexer","title":"Lexer","text":"<p>The lexer is the first part of the VM. It is responsible for parsing the source code and generating a list of tokens. Those tokens are then used by the execution engine to execute the logic of the program.</p> <p>It allows the VM to be able to execute the logic of the program without having to parse the source code at runtime. This is a huge performance boost.</p>"},{"location":"Technical%20Documentation/Vm/Description/#execution-engine","title":"Execution engine","text":"<p>The execution engine is the second part of the VM. It is responsible for executing the logic of the program. It takes the list of tokens generated by the lexer and executes the logic of the program.</p> <p>It is composed of several parts: - The stack - The heap - The Variable table - The function table</p>"},{"location":"Technical%20Documentation/Vm/Description/#stack","title":"Stack","text":"<p>The stack is the main data structure of the execution engine. It is used to store the values of the program.</p>"},{"location":"Technical%20Documentation/Vm/Description/#heap","title":"Heap","text":"<p>The heap is the second data structure of the execution engine. It is used to store the values of the program that are too big to fit on the stack.</p>"},{"location":"Technical%20Documentation/Vm/Description/#variable-table","title":"Variable table","text":"<p>The variable table is the third data structure of the execution engine. It is used to store the variables of the program.</p>"},{"location":"Technical%20Documentation/Vm/Description/#function-table","title":"Function table","text":"<p>The function table is the fourth data structure of the execution engine. It is used to store the functions of the program.</p>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/","title":"Common Programming Concepts","text":""},{"location":"User%20Documentation/Common%20Programming%20Concepts/#common-programming-concepts","title":"Common Programming Concepts","text":"<p>In this chapter, we'll cover all the common concepts Funk shares with other languages. Specifically we'll talk variables, loop, conditional statements, functions and IO.</p>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#variables","title":"Variables","text":"<p>Variables in Funk are similar to all the other variable concepts. It is an identifier used to store data in memory.</p> <p>We use the <code>var</code> syntaxe to define variable and bind them to a type. Once a variable is bound it cannot be associated to data of another type unless we re-declare it again using <code>var</code> and specifying a type.</p> <p>Here is how to use <code>var</code>:</p> <pre><code>var my_variable: i32 = 10;\n</code></pre> <p>This creates a new variable in the stack. We specify after the <code>:</code> a type. Types will be described in the next chapter. Then using equal <code>=</code> we associate an expression, here <code>10</code> to the variable. You may notice a semicolon <code>;</code> at the end of the line, all Funk instruction must end with a <code>;</code> to be valid.</p> <p>Once a variable is defined you can re-assign a new value using the assign syntax and the <code>=</code> symbol.</p> <pre><code>var my_variable: i32 = 10;\nmy_variable = 20;\n</code></pre> <p>This will change the value stored inside the variable but not the size of the variable.</p>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#types","title":"Types","text":""},{"location":"User%20Documentation/Common%20Programming%20Concepts/#primitive-types","title":"Primitive types","text":"<p>Funk supports up to 64-bits numbers.</p> Signed Unsigned Size Description i8 u8 8-bits integer i16 u16 16-bits integer i32 u32 32-bits integer i64 u64 64-bits integer f32 32-bit float f64 64-bits float"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#arrays","title":"Arrays","text":"<p>An array is a fixed size, list of items of the same type. In memory, each element in the array is next to the other. Every bit of the array is aligned in memory.</p> <p>The type representation for a 8-bit unsigned array of 10 elements is as follows: <code>u8[10]</code>. In Funk we use the brakets to specify an array, and an litteral integer telling its size. the size of each element is given by prefixing the brackets with a primitive type.</p> <p>In order to give it a value we use brackets and separate each expression by a comma.</p> <pre><code>var my_array: i32[5] = [10, 20, 30, 40, 50];\n</code></pre> <p>Funk also provides you with some syntactic sugar for array creation.</p> <p>Leave the array type's brackets empty, and Funk will automatically infer the size using the given array value.</p> <pre><code>var my_array: i32[] = [10, 20, 30, 40, 50];\n// Automatically generate an array of length 5\n</code></pre> <p>Regarding arrays that are longer than what your poor fingers can type, you can simply ignore what's left and it will be set to a default value (0)</p> <pre><code>var my_array: i32[100] = [10, 20, 30];\n// That's a long one!\n//Thankfully, Funk handles the 97 other values to put in the array, giving all those remaining values the default 0\n</code></pre>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#strings","title":"Strings","text":"<p>Strings in Funk are as in C, arrays of integer. However, you can specify the lenght of a character when creating a string, supporting other encoding format like 64-bit unicode.</p> <p>You can define a string using doublequotes <code>\"\"</code> as the value for a typical array. Funk supports escaped characters like <code>\\n</code>, <code>\\0</code>, <code>\\t</code> and more.</p> <pre><code>var my_string: u8[] = \"Hello!\";\n</code></pre> <p>As with arrays, syntactic sugar is usable to infer the size of the string, but you can also manually set it or give a smaller string than what you're actually writing to give it a small buffer (it will be 0 initialized).</p>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Funk provides the usual operators for arithmetic operations.</p> Symbol Name Symbol Name + Addition - Substraction * Multiplication / Division % Modulus"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#logic-operators","title":"Logic operators","text":"<p>Funk provides the usual operators for handling logic.</p> Symbol Name Symbol Name == Equality != Inequality &gt; Greater than &gt;= Greater or equal &lt; Lesser than &lt;= Lesser or equal &amp;&amp; And || Or ! Not <p>As in C these operators return <code>1</code> if true and <code>0</code> if false.</p>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#conditional-statements","title":"Conditional statements","text":"<p>Conditional logic is done using the one and only <code>if</code> statement. Used alongside a condition in parentheses and a then scoped block, <code>if</code> can be used for conditional expressions.</p> <pre><code>if (x &lt; 10) {\n    return 0;\n}\n</code></pre> <p>We can optionnaly specify an <code>else</code> statement in case the condition is <code>false</code>.</p> <pre><code>if (x &lt; 10) {\n    return 0;\n} else {\n    x = x - 1;\n}\n</code></pre>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#indexing","title":"Indexing","text":"<p>In order to access a certain element in a array (strings are arrays too), you can use the indexing syntax and specify an index to get. Simply put brackets after the name of the array you want to access.</p> <p>Remember: in Funk, arrays start at 0.</p> <pre><code>var my_string: u8[] = \"Hello!\";\nvar letter_l: u8 = my_string[3];\n</code></pre>"},{"location":"User%20Documentation/Common%20Programming%20Concepts/#iterating","title":"Iterating","text":"<p>Funk is an imperative programming language to its core, and so it needs iterating! To iterate, you can use the ultimate loop mankind ever created: the <code>while</code> loop. It functions as every other while loop before it, give it a condition and a block of instructions to repeat, and it will until the condition is false.</p> <pre><code>var counter: i32 = 10;\n\nwhile (counter &gt; 0) {\n    counter = counter - 1;\n}\n</code></pre>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/","title":"Common Programming Concepts cn","text":""},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_1","title":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5","text":"<p>\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u6db5\u76d6Funk\u4e0e\u5176\u4ed6\u8bed\u8a00\u5171\u4eab\u7684\u6240\u6709\u5e38\u89c1\u6982\u5ff5\u3002\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u53d8\u91cf\u3001\u5faa\u73af\u3001\u6761\u4ef6\u8bed\u53e5\u3001\u51fd\u6570\u548c\u8f93\u5165/\u8f93\u51fa\u3002</p>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_2","title":"\u53d8\u91cf","text":"<p>\u5728Funk\u4e2d\uff0c\u53d8\u91cf\u4e0e\u5176\u4ed6\u8bed\u8a00\u7684\u53d8\u91cf\u6982\u5ff5\u76f8\u4f3c\u3002\u5b83\u662f\u7528\u4e8e\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u6570\u636e\u7684\u6807\u8bc6\u7b26\u3002</p> <p>\u6211\u4eec\u4f7f\u7528 <code>var</code> \u8bed\u6cd5\u6765\u5b9a\u4e49\u53d8\u91cf\u5e76\u5c06\u5b83\u4eec\u7ed1\u5b9a\u5230\u7c7b\u578b\u3002\u4e00\u65e6\u53d8\u91cf\u88ab\u7ed1\u5b9a\uff0c\u5c31\u4e0d\u80fd\u5c06\u5176\u4e0e\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5173\u8054\uff0c\u9664\u975e\u6211\u4eec\u518d\u6b21\u4f7f\u7528 <code>var</code> \u91cd\u65b0\u58f0\u660e\u5e76\u6307\u5b9a\u7c7b\u578b\u3002</p> <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528 <code>var</code>\uff1a</p> <pre><code>var my_variable: i32 = 10;\n</code></pre> <p>\u8fd9\u5728\u5806\u6808\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u53d8\u91cf\u3002\u6211\u4eec\u5728 <code>:</code> \u540e\u9762\u6307\u5b9a\u7c7b\u578b\u3002\u7c7b\u578b\u5c06\u5728\u4e0b\u4e00\u7ae0\u4e2d\u63cf\u8ff0\u3002\u7136\u540e\u4f7f\u7528\u7b49\u53f7 <code>=</code> \u5c06\u8868\u8fbe\u5f0f\uff08\u8fd9\u91cc\u662f10\uff09\u4e0e\u53d8\u91cf\u5173\u8054\u8d77\u6765\u3002\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u5728\u884c\u672b\u6709\u4e00\u4e2a\u5206\u53f7 <code>;</code>\uff0c\u6240\u6709Funk\u6307\u4ee4\u5fc5\u987b\u4ee5\u5206\u53f7\u7ed3\u675f\u624d\u80fd\u6709\u6548\u3002</p> <p>\u4e00\u65e6\u5b9a\u4e49\u4e86\u53d8\u91cf\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8d4b\u503c\u8bed\u6cd5\u548c\u7b49\u53f7 = \u7b26\u53f7\u91cd\u65b0\u5206\u914d\u65b0\u503c\u3002</p> <pre><code>var my_variable: i32 = 10;\nmy_variable = 20;\n</code></pre> <p>\u8fd9\u5c06\u66f4\u6539\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u503c\uff0c\u4f46\u4e0d\u6539\u53d8\u53d8\u91cf\u7684\u5927\u5c0f\u3002</p>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_3","title":"\u7c7b\u578b","text":""},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_4","title":"\u539f\u59cb\u7c7b\u578b","text":"<p>Funk\u652f\u6301\u6700\u591a64\u4f4d\u7684\u6570\u5b57\u3002</p> \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 \u5927\u5c0f \u63cf\u8ff0 i8 u8 8\u4f4d \u6574\u6570 i16 u16 16\u4f4d \u6574\u6570 i32 u32 32\u4f4d \u6574\u6570 i64 u64 64\u4f4d \u6574\u6570 f32 - 32\u4f4d f64 - 64\u4f4d"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_5","title":"\u6570\u7ec4","text":"<p>\u6570\u7ec4\u662f\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u56fa\u5b9a\u5927\u5c0f\u7684\u9879\u76ee\u5217\u8868\u3002\u5728\u5185\u5b58\u4e2d\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u76f8\u90bb\u3002\u6570\u7ec4\u7684\u6bcf\u4e00\u4f4d\u90fd\u5728\u5185\u5b58\u4e2d\u5bf9\u9f50\u3002</p> <p>\u8868\u793a\u5305\u542b10\u4e2a8\u4f4d\u65e0\u7b26\u53f7\u5143\u7d20\u7684\u6570\u7ec4\u7684\u7c7b\u578b\u8868\u793a\u5982\u4e0b\uff1a<code>u8[10]</code>\u3002\u5728Funk\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u62ec\u53f7\u6307\u5b9a\u6570\u7ec4\uff0c\u5e76\u7528\u4e00\u4e2a\u5b57\u9762\u6574\u6570\u6307\u5b9a\u5176\u5927\u5c0f\u3002\u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u524d\u9762\u52a0\u4e0a\u539f\u59cb\u7c7b\u578b\uff0c\u53ef\u4ee5\u7ed9\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u3002</p> <p>\u4e3a\u4e86\u7ed9\u5b83\u8d4b\u503c\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u62ec\u53f7\uff0c\u5e76\u7528\u9017\u53f7\u5206\u9694\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u3002</p> <pre><code>var my_array: i32[5] = [10, 20, 30, 40, 50];\n</code></pre> <p>Funk\u8fd8\u4e3a\u6570\u7ec4\u521b\u5efa\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u3002</p> <p>\u5c06\u6570\u7ec4\u7c7b\u578b\u7684\u65b9\u62ec\u53f7\u7559\u7a7a\uff0cFunk\u5c06\u81ea\u52a8\u4f7f\u7528\u7ed9\u5b9a\u7684\u6570\u7ec4\u503c\u63a8\u65ad\u5927\u5c0f\u3002</p> <pre><code>var my_array: i32[] = [10, 20, 30, 40, 50];\n// \u81ea\u52a8\u751f\u6210\u957f\u5ea6\u4e3a5\u7684\u6570\u7ec4`\n</code></pre> <p>\u5bf9\u4e8e\u6bd4\u4f60\u7684\u624b\u6307\u80fd\u6572\u51fa\u7684\u66f4\u957f\u7684\u6570\u7ec4\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u5ffd\u7565\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u5b83\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u503c\uff080\uff09\u3002</p> <pre><code>var my_array: i32[100] = [10, 20, 30];\n// \u8fd9\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u6570\u7ec4\uff01\n// \u5e78\u8fd0\u7684\u662f\uff0cFunk\u4f1a\u5904\u7406\u6570\u7ec4\u4e2d\u7684\u5176\u4ed697\u4e2a\u503c\uff0c\u7ed9\u6240\u6709\u8fd9\u4e9b\u5269\u4f59\u7684\u503c\u9ed8\u8ba4\u503c0\n</code></pre>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_6","title":"\u5b57\u7b26\u4e32","text":"<p>\u5728Funk\u4e2d\uff0c\u5b57\u7b26\u4e32\u4e0eC\u8bed\u8a00\u4e2d\u4e00\u6837\uff0c\u662f\u6574\u6570\u6570\u7ec4\u3002\u4f46\u662f\uff0c\u521b\u5efa\u5b57\u7b26\u4e32\u65f6\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u5b57\u7b26\u7684\u957f\u5ea6\uff0c\u652f\u6301\u5176\u4ed6\u7f16\u7801\u683c\u5f0f\uff0c\u598264\u4f4dUnicode\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u53cc\u5f15\u53f7 \"\" \u4f5c\u4e3a\u5178\u578b\u6570\u7ec4\u7684\u503c\u6765\u5b9a\u4e49\u5b57\u7b26\u4e32\u3002Funk\u652f\u6301\u50cf <code>\\n</code>\u3001<code>\\0</code>\u3001<code>\\t</code> \u7b49\u8f6c\u4e49\u5b57\u7b26\u3002</p> <pre><code>var my_string: u8[] = \"Hello!\";\n</code></pre> <p>\u4e0e\u6570\u7ec4\u4e00\u6837\uff0c\u8bed\u6cd5\u7cd6\u53ef\u7528\u4e8e\u63a8\u65ad\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u624b\u52a8\u8bbe\u7f6e\u5927\u5c0f\uff0c\u6216\u63d0\u4f9b\u6bd4\u5b9e\u9645\u5199\u5165\u7684\u5b57\u7b26\u4e32\u5c0f\u7684\u5b57\u7b26\u4e32\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u5c0f\u7f13\u51b2\u533a\uff08\u5b83\u5c06\u88ab0\u521d\u59cb\u5316\uff09\u3002</p>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_7","title":"\u7b97\u672f\u8fd0\u7b97\u7b26","text":"<p>Funk\u63d0\u4f9b\u7528\u4e8e\u7b97\u672f\u8fd0\u7b97\u7684\u901a\u5e38\u8fd0\u7b97\u7b26\u3002</p> \u7b26\u53f7 \u540d\u79f0 \u7b26\u53f7 \u540d\u79f0 + \u52a0\u6cd5 - \u51cf\u6cd5 * \u4e58\u6cd5 / \u9664\u6cd5 % \u53d6\u6a21"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_8","title":"\u903b\u8f91\u8fd0\u7b97\u7b26","text":"<p>Funk\u63d0\u4f9b\u7528\u4e8e\u5904\u7406\u903b\u8f91\u7684\u901a\u5e38\u8fd0\u7b97\u7b26\u3002</p> \u7b26\u53f7 \u540d\u79f0 \u7b26\u53f7 \u540d\u79f0 == \u76f8\u7b49 != \u4e0d\u76f8\u7b49 &gt; \u5927\u4e8e &gt;= \u5927\u4e8e\u6216\u7b49\u4e8e &lt; \u5c0f\u4e8e &lt;= \u5c0f\u4e8e\u6216\u7b49\u4e8e &amp;&amp; \u4e0e || \u6216\u8005 ! \u975e <p>\u4e0eC\u8bed\u8a00\u4e00\u6837\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u5982\u679c\u4e3a\u771f\u8fd4\u56de<code>1</code>\uff0c\u4e3a\u5047\u8fd4\u56de<code>0</code>\u3002</p>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_9","title":"\u6761\u4ef6\u8bed\u53e5","text":"<p>\u6761\u4ef6\u903b\u8f91\u4f7f\u7528\u552f\u4e00\u7684 <code>if</code> \u8bed\u53e5\u5b8c\u6210\u3002\u4e0e\u6761\u4ef6\u5728\u62ec\u53f7\u4e2d\u4e00\u8d77\u4f7f\u7528\u548c\u4e00\u4e2a\u6709\u8303\u56f4\u7684\u5757\uff0c<code>if</code> \u53ef\u4ee5\u7528\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u3002</p> <pre><code>if (x &lt; 10) {\n    return 0;\n}\n</code></pre> <p>\u5982\u679c\u6761\u4ef6\u4e3a\u5047\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6307\u5b9a <code>else</code> \u8bed\u53e5\u3002</p> <pre><code>if (x &lt; 10) {\n    return 0;\n} else {\n    x = x - 1;\n}\n</code></pre>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_10","title":"\u7d22\u5f15","text":"<p>\u4e3a\u4e86\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff08\u5b57\u7b26\u4e32\u4e5f\u662f\u6570\u7ec4\uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8bed\u6cd5\u5e76\u6307\u5b9a\u8981\u83b7\u53d6\u7684\u7d22\u5f15\u3002\u53ea\u9700\u5728\u8981\u8bbf\u95ee\u7684\u6570\u7ec4\u540d\u79f0\u540e\u9762\u653e\u4e0a</p> <p>\u8bf7\u8bb0\u4f4f\uff1a\u5728Funk\u4e2d\uff0c\u6570\u7ec4\u4ece0\u5f00\u59cb\u3002</p> <pre><code>var my_string: u8[] = \"Hello!\";\nvar letter_l: u8 = my_string[3];\n</code></pre>"},{"location":"User%20Documentation/Common_Programming_Concepts_cn/#_11","title":"\u8fed\u4ee3","text":"<p>Funk\u662f\u4e00\u79cd\u6838\u5fc3\u4e3a\u547d\u4ee4\u5f0f\u7f16\u7a0b\u7684\u8bed\u8a00\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u8fed\u4ee3\uff01\u8981\u8fdb\u884c\u8fed\u4ee3\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4eba\u7c7b\u521b\u9020\u7684\u6700\u7ec8\u5faa\u73af\uff1a<code>while</code> \u5faa\u73af\u3002\u5b83\u7684\u529f\u80fd\u4e0e\u4e4b\u524d\u7684\u5176\u4ed6while\u5faa\u73af\u76f8\u540c\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6761\u4ef6\u548c\u8981\u91cd\u590d\u7684\u6307\u4ee4\u5757\uff0c\u76f4\u5230\u6761\u4ef6\u4e3a\u5047\u4e3a\u6b62\u3002</p> <pre><code>var counter: i32 = 10;\n\nwhile (counter &gt; 0) {\n    counter = counter - 1;\n}\n</code></pre> <p>\u8fd9\u4f7f\u5f97 <code>counter</code> \u9012\u51cf\uff0c\u76f4\u5230\u5b83\u7b49\u4e8e\u6216\u5c0f\u4e8e0\u3002</p>"},{"location":"User%20Documentation/Funk%20Introduction/","title":"Funk Introduction","text":""},{"location":"User%20Documentation/Funk%20Introduction/#the-funk-programming-language","title":"The Funk Programming Language","text":"<p>Welcome to The Funk Programming Language, an introduction about Funk. Funk is a High-level and low-level control inspired from Rust and the C heritage. Funk is all about elegant syntax from modern language while providing control over your code.</p>"},{"location":"User%20Documentation/Funk%20Introduction/#who-is-funk-for","title":"Who is Funk for ?","text":"<p>Funk is for programmers that are in a word: funky. We here at the Funk Foundation, wanted a language that would enable people from all horizon and backgrounds to embrace their true self. Being a Funk Programmer is not just something to put on a resume, it is a whole spirit.</p>"},{"location":"User%20Documentation/Funk%20Introduction/#legal","title":"Legal","text":"<p>Funk is an open-source language and is open to new contributor. The only requirement to write code for Funk is to be funky.</p>"},{"location":"User%20Documentation/Funk%20Introduction/#getting-started","title":"Getting Started","text":"<p>Let's start your Funk journey! There's a lot to learn, but every journey starts somewhere. We'll discuss writing a Hello World! program in Funk and how to use the syntax.</p>"},{"location":"User%20Documentation/Funk%20Introduction/#hello-world","title":"Hello World","text":"<p>Hello World! The classical, the first program you write everytime you learn something new. We'll do the same here in Funk!</p> <p>Start by creating a new project folder and a file named <code>hello.fk</code>. Funk utilizes the <code>.fk</code> extension for its source files.</p> <p>Start by creating a variable using the <code>var</code> keyword. Give it a name and then a type using the <code>:</code> symbol. Funk has multime primitive types we'll cover in a future chapter, for now we want to store a string. We'll use <code>u8[]</code> to store our string. Then add a value using the <code>=</code> symbol. We specify our message here. End your instructions with the required <code>;</code> semicolon and there you go you just created your first variable!</p> <pre><code>var hello: u8[] = \"Hello World!\";\n</code></pre> <p>Now in order to print it, we'll use the standard library for funk: <code>funkystd</code>.</p> <p>At the top of your file, add the following <code>#include \"funkystd\"</code>. This will provide your program with more function utility than ever! We can now use the <code>putstr</code> function from the library to print our message.</p> <pre><code>#include \"funkystd\"\n\nvar hello: u8[] = \"Hello World!\";\n\nputstrln(hello);\n</code></pre> <p>Congratulations! You just wrote your first program in Funk! But wait a minute, we still have not run it! Don't worry we'll see how to run Funk programs in the next chapter.</p>"},{"location":"User%20Documentation/Funk%20Introduction/#running-funk-programs","title":"Running Funk programs","text":"<p>You just made your first Funk Hello World! but you still have no clue how to run it? In this chapter we'll cover Funk execution.</p> <p>Funk is a compiled language, meaning it needs to be put inside another program in order to execute it. But we got you covered, you won't have to write your own. Using your command-line interface, enter the following:</p> <pre><code>$ funkc hello.fk\nCreated: out.bin\n</code></pre> <p>You get yourself a new file: <code>out.bin</code>. This file represent our program in bytecode. Like other compiled language, Funk is first compiled down to bytecode containing the set of instruction our program needs to make to achieve the wanted result.</p> <p>This file is not an executable binary, it is bytecode. Now we can use FVM (Funk Virtual Machine) to execute the bytecode instructions. Think about it like Java execution. You compile your project into a <code>.jar</code> file containing the bytecode and then feed it to the JVM (Java Virtual Machine). This is not plagiarism, it is inspiration.</p> <pre><code>$ fvm out.bin\nHello World!\n</code></pre> <p>And now its running! Your first program, is now displaying output on your terminal.</p>"},{"location":"User%20Documentation/Funk_Introduction_cn/","title":"Funk Introduction cn","text":""},{"location":"User%20Documentation/Funk_Introduction_cn/#the-funk","title":"The Funk\u7f16\u7a0b\u8bed\u8a00","text":"<p>\u6b22\u8fce\u6765\u5230 The Funk Programming Language\uff0c\u8fd9\u662f\u6709\u5173Funk\u7684\u4ecb\u7ecd\u3002Funk\u662f\u4e00\u79cd\u53d7Rust\u548cC\u4f20\u7edf\u542f\u53d1\u7684\u9ad8\u7ea7\u548c\u4f4e\u7ea7\u63a7\u5236\u8bed\u8a00\u3002Funk\u6ce8\u91cd\u73b0\u4ee3\u8bed\u8a00\u7684\u4f18\u96c5\u8bed\u6cd5\uff0c\u540c\u65f6\u63d0\u4f9b\u5bf9\u4ee3\u7801\u7684\u63a7\u5236\u3002</p>"},{"location":"User%20Documentation/Funk_Introduction_cn/#funk","title":"Funk\u9002\u7528\u4e8e\u8c01\uff1f","text":"<p>Funk\u9002\u7528\u4e8e\u90a3\u4e9b\u7a0b\u5e8f\u5458\uff0c\u7528\u4e00\u4e2a\u8bcd\u6765\u5f62\u5bb9\u5c31\u662f\u201c\u65f6\u9ae6\u7684\u201d\u3002 \u5728Funk\u57fa\u91d1\u4f1a\uff0c\u6211\u4eec\u5e0c\u671b\u6709\u4e00\u79cd\u8bed\u8a00\uff0c\u80fd\u8ba9\u6765\u81ea\u5404\u884c\u5404\u4e1a\u548c\u80cc\u666f\u7684\u4eba\u90fd\u80fd\u62e5\u62b1\u4ed6\u4eec\u7684\u771f\u6211\u3002\u6210\u4e3aFunk\u7a0b\u5e8f\u5458\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5386\u4e0a\u7684\u4e00\u9879\u6280\u80fd\uff0c\u66f4\u662f\u4e00\u79cd\u7cbe\u795e</p>"},{"location":"User%20Documentation/Funk_Introduction_cn/#_1","title":"\u6cd5\u5f8b\u4e8b\u9879","text":"<p>Funk\u662f\u4e00\u79cd\u5f00\u6e90\u8bed\u8a00\uff0c\u6b22\u8fce\u65b0\u7684\u8d21\u732e\u8005\u3002\u5199Funk\u4ee3\u7801\u7684\u552f\u4e00\u8981\u6c42\u662f\u8981\u65f6\u9ae6\u3002</p>"},{"location":"User%20Documentation/Funk_Introduction_cn/#_2","title":"\u5165\u95e8\u6307\u5357","text":"<p>\u8ba9\u6211\u4eec\u5f00\u59cb\u4f60\u7684Funk\u4e4b\u65c5\u5427\uff01\u6709\u5f88\u591a\u4e1c\u897f\u8981\u5b66\uff0c\u4f46\u6bcf\u4e2a\u65c5\u7a0b\u90fd\u8981\u4ece\u67d0\u4e2a\u5730\u65b9\u5f00\u59cb\u3002\u6211\u4eec\u5c06\u8ba8\u8bba\u5728Funk\u4e2d\u7f16\u5199Hello World!\u7a0b\u5e8f\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u8bed\u6cd5\u3002</p>"},{"location":"User%20Documentation/Funk_Introduction_cn/#hello-world","title":"Hello World","text":"<p>Hello World\uff01\u8fd9\u662f\u7ecf\u5178\u7684\u3001\u6bcf\u6b21\u5b66\u4e60\u65b0\u4e1c\u897f\u65f6\u90fd\u4f1a\u5199\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u3002\u5728Funk\u4e2d\u6211\u4eec\u4e5f\u4f1a\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff01</p> <p>\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u6587\u4ef6\u5939\u548c\u4e00\u4e2a\u540d\u4e3a <code>hello.fk</code> \u7684\u6587\u4ef6\u3002Funk\u4f7f\u7528 <code>.fk</code> \u6269\u5c55\u540d\u6765\u8868\u793a\u5176\u6e90\u6587\u4ef6\u3002</p> <p>\u901a\u8fc7\u4f7f\u7528 <code>var</code> \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u3002\u7ed9\u5b83\u4e00\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u4f7f\u7528 <code>:</code> \u7b26\u53f7\u6307\u5b9a\u7c7b\u578b\u3002Funk\u6709\u591a\u79cd\u539f\u59cb\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u4ecb\u7ecd\uff0c\u73b0\u5728\u6211\u4eec\u60f3\u8981\u5b58\u50a8\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u5c06\u4f7f\u7528 <code>u8[]</code> \u6765\u5b58\u50a8\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u3002\u7136\u540e\u4f7f\u7528 = \u7b26\u53f7\u6dfb\u52a0\u4e00\u4e2a\u503c\u3002\u5728\u8fd9\u91cc\u6307\u5b9a\u6211\u4eec\u7684\u6d88\u606f\u3002\u7528\u5fc5\u9700\u7684 <code>;</code> \u5206\u53f7\u7ed3\u675f\u4f60\u7684\u6307\u4ee4\uff0c\u8fd9\u6837\u4f60\u5c31\u521b\u5efa\u4e86\u4f60\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff01</p> <pre><code>var hello: u8[] = \"Hello World!\";\n</code></pre> <p>\u73b0\u5728\uff0c\u4e3a\u4e86\u6253\u5370\u5b83\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Funk\u7684\u6807\u51c6\u5e93\uff1a<code>funkystd</code>\u3002</p> <p>\u5728\u4f60\u7684\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9 <code>\"#include \"funkystd\"</code>\u3002\u8fd9\u5c06\u4e3a\u4f60\u7684\u7a0b\u5e8f\u63d0\u4f9b\u6bd4\u4ee5\u5f80\u66f4\u591a\u7684\u529f\u80fd\u5b9e\u7528\u6027\uff01\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e93\u4e2d\u7684 <code>putstr</code> \u51fd\u6570\u6765\u6253\u5370\u6211\u4eec\u7684\u6d88\u606f\u3002</p> <pre><code>#include \"funkystd\"\n\nvar hello: u8[] = \"Hello World!\";\n\nputstrln(hello);\n</code></pre> <p>\u606d\u559c\uff01\u4f60\u521a\u521a\u5728Funk\u4e2d\u7f16\u5199\u4e86\u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff01\u4f46\u7b49\u4e00\u4e0b\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u8fd0\u884c\u5b83\uff01\u4e0d\u8981\u62c5\u5fc3\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u5728\u4e0b\u4e00\u7ae0\u4e2d\u8fd0\u884cFunk\u7a0b\u5e8f\u3002</p>"},{"location":"User%20Documentation/Funk_Introduction_cn/#funk_1","title":"\u8fd0\u884cFunk\u7a0b\u5e8f","text":"<p>\u4f60\u521a\u521a\u5b8c\u6210\u4e86\u4f60\u7684\u7b2c\u4e00\u4e2aFunk Hello World!\uff0c\u4f46\u4f60\u4ecd\u7136\u4e0d\u77e5\u9053\u5982\u4f55\u8fd0\u884c\u5b83\uff1f\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecdFunk\u7684\u6267\u884c\u65b9\u5f0f\u3002</p> <p>Funk\u662f\u4e00\u79cd\u7f16\u8bd1\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u9700\u8981\u88ab\u653e\u5165\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u624d\u80fd\u6267\u884c\u3002\u4f46\u522b\u62c5\u5fc3\uff0c\u6211\u4eec\u5df2\u7ecf\u4e3a\u4f60\u51c6\u5907\u597d\u4e86\uff0c\u4f60\u4e0d\u5fc5\u81ea\u5df1\u7f16\u5199\u3002\u4f7f\u7528\u547d\u4ee4\u884c\u754c\u9762\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4:</p> <pre><code>$ funkc hello.fk\nCreated: out.bin\n</code></pre> <p>\u4f60\u5f97\u5230\u4e86\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a<code>out.bin</code>\u3002\u8fd9\u4e2a\u6587\u4ef6\u4ee3\u8868\u6211\u4eec\u7684\u7a0b\u5e8f\u7684<code>\u5b57\u8282\u7801</code>\u3002\u4e0e\u5176\u4ed6\u7f16\u8bd1\u8bed\u8a00\u4e00\u6837\uff0cFunk\u9996\u5148\u88ab\u7f16\u8bd1\u6210\u5305\u542b\u7a0b\u5e8f\u6240\u9700\u6307\u4ee4\u96c6\u7684\u5b57\u8282\u7801\u3002</p> <p>\u8fd9\u4e2a\u6587\u4ef6\u4e0d\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u800c\u662f\u5b57\u8282\u7801\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>FVM</code>\uff08Funk\u865a\u62df\u673a\uff09\u6765\u6267\u884c\u5b57\u8282\u7801\u6307\u4ee4\u3002\u60f3\u8c61\u4e00\u4e0bJava\u7684\u6267\u884c\u65b9\u5f0f\u3002\u4f60\u5c06\u9879\u76ee\u7f16\u8bd1\u6210\u4e00\u4e2a\u5305\u542b\u5b57\u8282\u7801\u7684 <code>.jar</code> \u6587\u4ef6\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9<code>JVM</code>\uff08Java\u865a\u62df\u673a\uff09\u3002\u8fd9\u4e0d\u662f\u527d\u7a83\uff0c\u8fd9\u662f\u7075\u611f\u6765\u6e90\u3002</p> <pre><code>$ fvm out.bin\nHello World!\n</code></pre> <p>\u73b0\u5728\u5b83\u6b63\u5728\u8fd0\u884c\uff01\u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u73b0\u5728\u5728\u7ec8\u7aef\u4e0a\u663e\u793a\u8f93\u51fa\u3002</p>"}]}